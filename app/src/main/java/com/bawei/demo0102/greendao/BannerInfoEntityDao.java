package com.bawei.demo0102.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bawei.demo0102.BannerInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANNER_INFO_ENTITY".
*/
public class BannerInfoEntityDao extends AbstractDao<BannerInfoEntity, Void> {

    public static final String TABLENAME = "BANNER_INFO_ENTITY";

    /**
     * Properties of entity BannerInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImageUrl = new Property(0, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
    }


    public BannerInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BannerInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANNER_INFO_ENTITY\" (" + //
                "\"IMAGE_URL\" TEXT," + // 0: imageUrl
                "\"TITLE\" TEXT);"); // 1: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANNER_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BannerInfoEntity entity) {
        stmt.clearBindings();
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(1, imageUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BannerInfoEntity entity) {
        stmt.clearBindings();
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(1, imageUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BannerInfoEntity readEntity(Cursor cursor, int offset) {
        BannerInfoEntity entity = new BannerInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imageUrl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BannerInfoEntity entity, int offset) {
        entity.setImageUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BannerInfoEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BannerInfoEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(BannerInfoEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
